# Telegraf Configuration

# Global tags can be specified here in key="value" format.
[global_tags]

# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  skip_processors_after_aggregators = true


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = true
  report_active = true
  core_tags = true

[[inputs.disk]]

[[inputs.diskio]]
  devices = ["*"]

[[inputs.mem]]

[[inputs.swap]]

[[inputs.system]]

# legacy, need something similar for v3
# [[inputs.internal]]
#    collect_memstats = true

[[inputs.net]]
    interfaces = ["*"]
    ignore_protocol_stats = true

[[inputs.netstat]]

[[inputs.win_perf_counters]]
    PrintValid = false
    UsePerfCounterTime = true
    UseWildcardsExpansion = false
    LocalizeWildcardsExpansion = true
    CountersRefreshInterval="1m"

## BEGIN APPLICATION-SPECIFIC SECTION
##
## For Hyper-V Hosts

## Hyper-V health
##
## You can test this with:
## typeperf "Hyper-V Virtual Machine Health Summary\Health Ok"
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Virtual Machine Health Summary"
  Instances = ["------"]
  Measurement = "hyperv_health"
  Counters = [
  "Health Ok",
  "Health Critical",
  ]

[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Hypervisor"
  Instances = ["------"]
  Measurement = "hyperv_hypervisor"
  Counters = [
  "Logical Processors",
  "Partitions",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Hypervisor Virtual Processor"
  Instances = ["*"]
  Measurement = "hyperv_processor"
  Counters = [
  "% Guest Run Time",
  "% Hypervisor Run Time",
  "% Idle Time",
  "% Total Run Time",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Dynamic Memory VM"
  Instances = ["*"]
  Measurement = "hyperv_dynamic_memory"
  Counters = [
  "Current Pressure",
  "Guest Visible Physical Memory",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V VM Vid Partition"
  Instances = ["*"]
  Measurement = "hyperv_vid"
  Counters = [
  "Physical Pages Allocated",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Virtual Switch"
  Instances = ["*"]
  Measurement = "hyperv_vswitch"
  Counters = [
  "Bytes Received/Sec",
  "Bytes Sent/Sec",
  "Packets Received/Sec",
  "Packets Sent/Sec",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Virtual Network Adapter"
  Instances = ["*"]
  Measurement = "hyperv_vmnet"
  Counters = [
  "Bytes Received/Sec",
  "Bytes Sent/Sec",
  "Packets Received/Sec",
  "Packets Sent/Sec",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Virtual IDE Controller"
  Instances = ["*"]
  Measurement = "hyperv_vmdisk"
  Counters = [
  "Read Bytes/Sec",
  "Write Bytes/Sec",
  "Read Sectors/Sec",
  "Write Sectors/Sec",
  ]

#To enable this you must have Instances = ["*"] instead of Instances = [""]
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Virtual Storage Device"
  Instances = ["*"]
  Measurement = "hyperv_storage"
  Counters = [
  "Write Operations/Sec",
  "Read Operations/Sec",
  "Read Bytes/Sec",
  "Write Bytes/Sec",
  "Latency",
  "Throughput",
  ]

# The current amount of memory available to virtual machines
#
# From the metric "\Hyper-V Dynamic Memory Balancer(*)\Available Memory"
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Dynamic Memory Balancer"
  Instances = ["*"]
  Measurement = "hyperv_available_memory"
  Counters = [
  "Available Memory",
  ]

  # Details about Hyper-V VM Remoting
  [[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V VM Remoting"
  Instances = ["*"]
  Measurement = "hyperv_remoting"
  Counters = [
  "Updated Pixels/sec",
  "Connected Clients",
  ]

# List virtual machines and processor count
#
# This uses "\Hyper-V Hypervisor Partition(*)\Virtual Processors"
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Hypervisor Partition"
  Instances = ["*"]
  Measurement = "hyperv_virtual_processors"
  Counters = [
  "Virtual Processors",
  ]


# Show dropped packet counts
#
# Uses the following performance object counters:
#     "\Hyper-V Virtual Switch Port(*)\Dropped Packets Outgoing/sec"
#     "\Hyper-V Virtual Switch Port(*)\Dropped Packets Incoming/sec"
[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Virtual Switch Port"
  Instances = ["*"]
  Measurement = "hyperv_virtual_packet_drops_sec"
  Counters = [
  "Dropped Packets Outgoing/sec",
  "Dropped Packets Incoming/sec",
  ]


#This is only if you use cluster file system
#[[inputs.win_perf_counters.object]]
#  ObjectName = "Cluster CSV File System"
#  Instances = [""]
#  Measurement = "cluster_csv_filesystem"
#  Counters = [
#  "Flushes/sec",
#  "Reads/sec",
#  "Writes/sec",
#  "Read Latency",
#  "Write Latency",
#  "Redirected Write Bytes/sec",
#  "Redirected Read Bytes/sec",
#  ]

## BEGIN STANDARD WINDOWS SECTION
##
## for all Windows Servers
## This section is complementary to the application section above and can be safely run as well.
[[inputs.win_perf_counters.object]]
    Measurement = "win_cpu"
    ObjectName = "Processor"
    Instances = ["*"]
    UseRawValues = true
    IncludeTotal = true
    Counters = [
    "% Processor Time",
    "% User Time",
    "% Privileged Time",
    "Interrupts/sec",
    "% DPC Time",
    "% Interrupt Time",
    "DPCs Queued/sec",
    "vDPC Rate",
    "% Idle Time",
    "% C1 Time",
    "% C2 Time",
    "% C3 Time",
    "C1 Transitions/sec",
    "C2 Transitions/sec",
    "C3 Transitions/sec",
    ]

[[inputs.win_perf_counters.object]]
    Measurement = "win_disk"
    ObjectName = "LogicalDisk"
    Instances = ["*"]
    Counters = [
    "% Idle Time",
    "% Disk Time",
    "% Disk Read Time",
    "% Disk Write Time",
    "% User Time",
    "% Free Space",
    "Current Disk Queue Length",
    "Free Megabytes",
    ]

[[inputs.win_perf_counters.object]]
    Measurement = "win_diskio"
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
    "Disk Read Bytes/sec",
    "Disk Write Bytes/sec",
    "Current Disk Queue Length",
    "Disk Reads/sec",
    "Disk Writes/sec",
    "% Disk Time",
    "% Disk Read Time",
    "% Disk Write Time",
    ]

    [[inputs.win_perf_counters.object]]
      Measurement = "win_net"
      ObjectName = "Network Interface"
      Instances = ["*"]
      Counters = [
      "Bytes Total/sec",
      "Packets/sec",
      "Packets Received/sec",
      "Packets Sent/sec",
      "Current Bandwidth",
      "Bytes Received/sec",
      "Packets Received Unicast/sec",
      "Packets Received Non-Unicast/sec",
      "Packets Received Discarded",
      "Packets Received Errors",
      "Packets Received Unknown",
      "Bytes Sent/sec",
      "Packets Sent Unicast/sec",
      "Packets Sent Non-Unicast/sec",
      "Packets Outbound Discarded",
      "Packets Outbound Errors",
      "Output Queue Length",
      "Offloaded Connections",
      "TCP Active RSC Connections",
      "TCP RSC Coalesced Packets/sec",
      "TCP RSC Exceptions/sec",
      "TCP RSC Average Packet Size",
      ]

    [[inputs.win_perf_counters.object]]
      Measurement = "win_system"
      ObjectName = "System"
      Instances = ["------"]
      Counters = [
      "Context Switches/s",
      "System Calls/sec",
      "System Up Time",
      "Processor Queue Length",
      "Processes",
      "Threads",
      "Alignment Fixups/sec",
      "Exception Dispatches/sec",
      "Floating Emulations/sec",
      ]

    [[inputs.win_perf_counters.object]]
      Measurement = "win_mem"
      ObjectName = "Memory"
      Instances = ["------"]
      Counters = [
      "Page Faults/sec",
      "Available Bytes",
      "Committed Bytes",
      "Commit Limit",
      "Write Copies/sec",
      "Transition Faults/sec",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Pages/sec",
      "Pages Input/sec",
      "Page Reads/sec",
      "Pages Output/sec",
      "Pool Paged Bytes",
      "Pool Nonpaged Bytes",
      "Page Writes/sec",
      "Pool Paged Allocs",
      "Pool Nonpaged Allocs",
      "Free System Page Table Entries",
      "Cache Bytes",
      "Cache Bytes Peak",
      "Pool Paged Resident Bytes",
      "System Code Total Bytes",
      "System Code Resident Bytes",
      "System Driver Total Bytes",
      "System Driver Resident Bytes",
      "System Cache Resident Bytes",
      "% Committed Bytes In Use",
      "Transition Pages RePurposed/sec",
      "Free & Zero Page List Bytes",
      "Modified Page List Bytes",
      "Standby Cache Reserve Bytes",
      "Standby Cache Normal Priority Bytes",
      "Standby Cache Core Bytes",
      "Long-Term Average Standby Cache Lifetime (s)",
    ]

    [[inputs.win_perf_counters.object]]
      Measurement = "win_swap"
      ObjectName = "Paging File"
      Instances = ["_Total"]
      Counters = [
      "% Usage",
      ]

    ## Legacy Windows "Process"
    # [[inputs.win_perf_counters.object]]
    # Measurement = "win_process"
    # ObjectName = "Process"
    # Instances = ["*"]
    # Counters = [
    #   "Elapsed Time",
    #   "ID Process",
    #   "Working Set - Private",
    #   "Thread Count",
    #   "Handle Count",
    #   "IO Read Operations/sec",
    #   "IO Write Operations/sec",
    #   "IO Other Operations/sec",
    #]

    ## Modern Windows "Process V2"
    [[inputs.win_perf_counters.object]]
    Measurement = "win_process_v2"
    ObjectName = "Process V2"
    Instances = ["*"]
    Counters = [
    "Elapsed Time",
    "Process ID",
    "Working Set - Private",
    "Thread Count",
    "Handle Count",
    "IO Other Operations/sec",
    "IO Data Operations/sec",
    "IO Write Operations/sec",
    "IO Read Operations/sec",
    ]


[[inputs.win_services]]
#   ## Names of the services to monitor. Leave empty to monitor all the available
#   ## services on the host. Globs accepted. Case insensitive.
#   This includes the "Hyper-V Virtual Machine Manager Service" ("vmms").
   service_names = [
    "LanmanServer",
    "TermService",
    "Telegraf",
    "Win*",
    "vmms",
   ]
#   excluded_service_names = ['WinRM']

# Windows Time Service performance metrics
##
## This one must have the "Instances" set as ["------"]

[[inputs.win_perf_counters.object]]
    ObjectName = "Windows Time Service"
    Instances = ["------"]
	  Measurement = "win_time"
    Counters = [
    "NTP Server Outgoing Responses",
    "NTP Server Incoming Requests",
    "NTP Client Time Source Count",
    "NTP Roundtrip Delay",
    "Clock Frequency Adjustment (PPB)",
    "Clock Frequency Adjustment",
    "Computed Time Offset",
    ]

###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################



# # Input plugin to collect Windows Event Log messages
# # This plugin ONLY supports Windows
# [[inputs.win_eventlog]]
#   ## Telegraf should have Administrator permissions to subscribe for some
#   ## Windows Events channels (e.g. System log)
#
#   ## LCID (Locale ID) for event rendering
#   ## 1033 to force English language
#   ## 0 to use default Windows locale
#   # locale = 0
#
#   ## Name of eventlog, used only if xpath_query is empty
#   ## Example: "Application"
#   # eventlog_name = ""
#
#   ## xpath_query can be in defined short form like "Event/System[EventID=999]"
#   ## or you can form a XML Query. Refer to the Consuming Events article:
#   ## https://docs.microsoft.com/en-us/windows/win32/wes/consuming-events
#   ## XML query is the recommended form, because it is most flexible
#   ## You can create or debug XML Query by creating Custom View in Windows Event Viewer
#   ## and then copying resulting XML here
#   xpath_query = '''
#   <QueryList>
#     <Query Id="0" Path="Security">
#       <Select Path="Security">*</Select>
#       <Suppress Path="Security">*[System[( (EventID &gt;= 5152 and EventID &lt;= 5158) or EventID=5379 or EventID=4672)]]</Suppress>
#     </Query>
#     <Query Id="1" Path="Application">
#       <Select Path="Application">*[System[(Level &lt; 4)]]</Select>
#     </Query>
#     <Query Id="2" Path="Windows PowerShell">
#       <Select Path="Windows PowerShell">*[System[(Level &lt; 4)]]</Select>
#     </Query>
#     <Query Id="3" Path="System">
#       <Select Path="System">*</Select>
#     </Query>
#     <Query Id="4" Path="Setup">
#       <Select Path="Setup">*</Select>
#     </Query>
#   </QueryList>
#   '''
#
#   ## When true, event logs are read from the beginning; otherwise only future
#   ## events will be logged.
#   # from_beginning = false
#
#   ## Number of events to fetch in one batch
#   # event_batch_size = 5
#
#   # Process UserData XML to fields, if this node exists in Event XML
#   # process_userdata = true
#
#   # Process EventData XML to fields, if this node exists in Event XML
#   # process_eventdata = true
#
#   ## Separator character to use for unrolled XML Data field names
#   # separator = "_"
#
#   ## Get only first line of Message field. For most events first line is
#   ## usually more than enough
#   # only_first_line_of_message = true
#
#   ## Parse timestamp from TimeCreated.SystemTime event field.
#   ## Will default to current time of telegraf processing on parsing error or if
#   ## set to false
#   # timestamp_from_event = true
#
#   ## System field names:
#   ##   "Source", "EventID", "Version", "Level", "Task", "Opcode", "Keywords",
#   ##   "TimeCreated", "EventRecordID", "ActivityID", "RelatedActivityID",
#   ##   "ProcessID", "ThreadID", "ProcessName", "Channel", "Computer", "UserID",
#   ##   "UserName", "Message", "LevelText", "TaskText", "OpcodeText"
#   ##
#   ## In addition to System, Data fields can be unrolled from additional XML
#   ## nodes in event. Human-readable representation of those nodes is formatted
#   ## into event Message field, but XML is more machine-parsable
#
#   ## Event fields to include as tags
#   ## The values below are included by default.
#   ## Globbing supported (e.g. "Level*" matches both "Level" and "LevelText")
#   # event_tags = ["Source", "EventID", "Level", "LevelText", "Task", "TaskText", "Opcode", "OpcodeText", "Keywords", "Channel", "Computer"]
#
#   ## Event fields to include
#   ## All fields are sent by default.
#   ## Globbing supported (e.g. "Level*" matches both "Level" and "LevelText")
#   # event_fields = ["*"]
#
#   ## Event fields to exclude
#   ## Note that if you exclude all fields then no metrics are produced. A valid
#   ## metric includes at least one field.
#   ## Globbing supported (e.g. "Level*" matches both "Level" and "LevelText")
#   # exclude_fields = []
#
#   ## Event fields to exclude if their value is empty or equals to zero
#   ## The values below are included by default.
#   ## Globbing supported (e.g. "Level*" matches both "Level" and "LevelText")
#   # exclude_empty = ["Task", "Opcode", "*ActivityID", "UserID"]



